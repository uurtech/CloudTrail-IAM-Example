
AWSTemplateFormatVersion: "2010-09-09"

Description: "Security Control: Notify on CreateIAMUser API"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Security Control Setup
      Parameters:
      - pLambdaZipBucket
      - pLambdaZipKey
      - pNotificationEmail
    - Label:
        default: Security Control Options
      Parameters:
      - pLoggingLevel
    ParameterLabels:
      pLambdaZipBucket:
        default: S3 Bucket
      pLambdaZipKey:
        default: S3 Key
      pNotificationEmail:
        default: Notification email
      pLoggingLevel:
        default: Lambda Logging level

Parameters:
  pLambdaZipBucket:
    Type: String
    Description: Name of the S3 Bucket
    AllowedPattern: ^[a-zA-Z0-9-\-_.]{3,63}
  pLambdaZipKey:
    Type: String
    Description: The file key name, should be a ZIPO file (e.g. functions/security-control.zip)
  pLoggingLevel:
    Type: String
    Default: ERROR
    Description: Sets the logging level of your security control's Lambda function.
    AllowedValues:
    - ERROR
    - WARNING
    - INFO
  pNotificationEmail:
    Type: String
    Default: example@example.com
    Description: Email address to alert of any security control violations
    AllowedPattern: "^[\\w-\\+]+(\\.[\\w]+)*@[\\w-]+(\\.[\\w]+)*(\\.[a-z]{2,})$"

Resources:
  rLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-LambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: CloudWatchLogsPermissions
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'
            - Sid: LambdaFunctionPermissionsforSNSPublish
              Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref 'rNotifyTopicSNS'

  rLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: rLambdaRole
    Properties:
      FunctionName: !Sub ${AWS::StackName}-LambdaFunction
      Role: !GetAtt rLambdaRole.Arn
      Environment:
        Variables:
          outbound_topic_arn: !Ref 'rNotifyTopicSNS'
          logging_level: !Ref 'pLoggingLevel'
      Handler: index.lambda_handler
      Timeout: 60
      Runtime: python3.9
      Code:
        S3Bucket: !Ref pLambdaZipBucket
        S3Key: !Ref pLambdaZipKey
      Tags:
        - Key: "Lambda Function Name"
          Value: !Sub '${AWS::StackName}-LambdaFunction'
  # Event rule to trigger evaluation
  rConfigEventRule:
    Type: AWS::Events::Rule
    DependsOn: rLambdaFunction
    Properties:
      EventPattern:
        source:
          - aws.iam
        detail-type:
            - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - iam.amazonaws.com
          eventName:
            - CreateUser
      Targets:
      - Arn: !GetAtt 'rLambdaFunction.Arn'
        Id: rLambdaFunction
    # Lambda permission - event rule can trigger evaluation
  rLambdaPermission:
      Type: AWS::Lambda::Permission
      DependsOn: rLambdaFunction
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt 'rLambdaFunction.Arn'
        Principal: events.amazonaws.com
        SourceArn: !GetAtt rConfigEventRule.Arn

    # Notification SNS topic
  rNotifyTopicSNS:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
          - Endpoint: !Ref pNotificationEmail
            Protocol: email
